{"version":3,"sources":["logic.js","components/Square.js","components/Board.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","console","log","style","background","border","fontSize","fontWeight","cursor","outline","Square","value","onClick","borderRadius","width","height","margin","display","gridTemplate","Board","map","square","styles","styleBtn","backgroundColor","pStyle","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXisNext","winner","timeInHistory","slice","current","_step","move","destination","step","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAAO,SAASA,EAAgBC,GAa9B,IAZA,IAAMC,EAAQ,CAEZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACpE,OAAON,EAAQI,GAGnB,OAAO,KAKTG,QAAQC,IAAIT,EAFI,CAAC,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,KAAM,KAAM,Q,WClBxDU,EAAQ,CACZC,WAAY,UACZC,OAAQ,oBACRC,SAAU,OACVC,WAAY,MACZC,OAAQ,UACRC,QAAS,QAQIC,EANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OACb,wBAAQT,MAAOA,EAAOS,QAASA,EAA/B,SACGD,KCVCR,EAAQ,CACZE,OAAQ,oBACRQ,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,mCAYDC,EARD,SAAC,GAAD,IAAGzB,EAAH,EAAGA,QAASkB,EAAZ,EAAYA,QAAZ,OACZ,qBAAKT,MAAOA,EAAZ,SACGT,EAAQ0B,KAAI,SAACC,EAAQzB,GAAT,OACX,cAAC,EAAD,CAAgBe,MAAOU,EAAQT,QAAS,kBAAMA,EAAQhB,KAAzCA,SCdb0B,EAAS,CACbR,MAAO,QACPE,OAAQ,aAGJO,EAAW,CACfC,gBAAiB,WAGbC,EAAS,CACbnB,SAAU,OACVC,WAAY,QAsDCmB,EApDF,WAAO,IAAD,EACaC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QADrC,mBACVC,EADU,KACDC,EADC,OAEmBJ,mBAAS,GAF5B,mBAEVK,EAFU,KAEEC,EAFF,OAGaN,oBAAS,GAHtB,mBAGVO,EAHU,KAGDC,EAHC,KAIXC,EAAS3C,EAAgBqC,EAAQE,IAiCvC,OACE,qCACE,cAAC,EAAD,CAAOtC,QAASoC,EAAQE,GAAapB,QAjCrB,SAAChB,GACnB,IAAMyC,EAAgBP,EAAQQ,MAAM,EAAGN,EAAa,GAC9CO,EAAUF,EAAcL,GACxBtC,EAAO,YAAO6C,GAEhBH,GAAU1C,EAAQE,KAEtBF,EAAQE,GAAKsC,EAAU,IAAM,IAC7BH,EAAW,GAAD,mBAAKM,GAAL,CAAoB3C,KAC9BuC,EAAcI,EAAcxC,QAC5BsC,GAAYD,OAwBV,sBAAK/B,MAAOmB,EAAZ,UACE,mBAAGnB,MAAOsB,EAAV,SACGW,EACG,kBAAoBA,EAAS,IAC7B,wBAA0BF,EAAU,IAAM,OAnBpDJ,EAAQV,KAAI,SAACoB,EAAOC,GAElB,IAAMC,EAAcD,EAAI,qBAAiBA,GAAS,cAClD,OACE,6BACE,wBAAQtC,MAAOoB,EAAUX,QAAS,kBAVxCqB,EADcU,EAWuCF,QATrDN,EAAWQ,EAAO,IAAM,GAFX,IAACA,GAWR,SACGD,KAFID,aCzCFG,EAFH,kBAAM,cAAC,EAAD,KCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c7ffacdd.chunk.js","sourcesContent":["export function calculateWinner(squares) {\n  const lines = [\n    // squares to win\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  // loop through arrays\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nconst squares = [null, null, null, 'X', 'O', 'O', null, null, null];\n\nconsole.log(calculateWinner(squares));\n","//scaffholding component\nimport React from 'react';\n\n//style squares\nconst style = {\n  background: '#95d5b2',\n  border: '2px solid #74c69d',\n  fontSize: '30px',\n  fontWeight: '800',\n  cursor: 'pointer',\n  outline: 'none',\n};\nconst Square = ({ value, onClick }) => (\n  <button style={style} onClick={onClick}>\n    {value}\n  </button>\n);\n\nexport default Square;\n","//scaffholding component\nimport React from 'react';\nimport Square from './Square';\n\nconst style = {\n  border: '4px solid #52b788',\n  borderRadius: '10px',\n  width: '650px',\n  height: '650px',\n  margin: '0 auto',\n  display: 'grid',\n  gridTemplate: 'repeat(3, 1fr) / repeat(3, 1fr)',\n};\n\n//maP through squares and display them\nconst Board = ({ squares, onClick }) => (\n  <div style={style}>\n    {squares.map((square, i) => (\n      <Square key={i} value={square} onClick={() => onClick(i)} />\n    ))}\n  </div>\n);\n\nexport default Board;\n","import React, { useState } from 'react';\nimport { calculateWinner } from '../logic';\nimport Board from './Board';\n\nconst styles = {\n  width: '200px',\n  margin: '20px auto',\n};\n\nconst styleBtn = {\n  backgroundColor: '#40916c',\n};\n\nconst pStyle = {\n  fontSize: '26px',\n  fontWeight: 'bold',\n};\nconst Game = () => {\n  const [history, setHistory] = useState([Array(9).fill(null)]); // create empty array\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXisNext] = useState(true);\n  const winner = calculateWinner(history[stepNumber]); // most Recent step\n\n  const handleClick = (i) => {\n    const timeInHistory = history.slice(0, stepNumber + 1);\n    const current = timeInHistory[stepNumber];\n    const squares = [...current];\n    // if user clicks on already occupied square or if game is won -> then return\n    if (winner || squares[i]) return;\n    // put an X or an O in the clicked square\n    squares[i] = xIsNext ? 'X' : 'O';\n    setHistory([...timeInHistory, squares]);\n    setStepNumber(timeInHistory.length);\n    setXisNext(!xIsNext);\n  };\n\n  const jumpTo = (step) => {\n    setStepNumber(step);\n    setXisNext(step % 2 === 0);\n  };\n\n  const renderMoves = () =>\n    history.map((_step, move) => {\n      // render out btns where we jump back and forth\n      const destination = move ? `Go to move#${move}` : 'Go to start';\n      return (\n        <li key={move}>\n          <button style={styleBtn} onClick={() => jumpTo(move)}>\n            {destination}\n          </button>\n        </li>\n      );\n    });\n\n  return (\n    <>\n      <Board squares={history[stepNumber]} onClick={handleClick} />\n      <div style={styles}>\n        <p style={pStyle}>\n          {winner\n            ? 'The winner is: ' + winner + '!'\n            : 'The next Player is: ' + (xIsNext ? 'X' : 'O')}\n        </p>\n        {renderMoves()}\n      </div>\n    </>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport Game from './components/Game';\n\nconst App = () => <Game />;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}